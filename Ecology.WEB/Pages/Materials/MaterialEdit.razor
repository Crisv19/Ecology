@page "/materials/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Editar Material</h3>

@if (material is null)
{
    <p>Cargando...</p>
}
else
{
    <MaterialForm @ref="materialForm" Material="material" OnValidSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Material? material;
    private MaterialForm? materialForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Material>($"api/materials/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("materials");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            material = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/materials", material);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            materialForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("materials");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("materials");
    }
}
